{"ast":null,"code":"import _slicedToArray from \"C:\\\\project1\\\\s02p13c103\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\project1\\\\s02p13c103\\\\web\\\\src\\\\components\\\\Template\\\\Content.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport CardContent from '@material-ui/core/CardContent';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport Pagination from \"material-ui-flat-pagination\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    maxWidth: 1800,\n    margin: 'auto',\n    overflow: 'hidden'\n  },\n  searchBar: {\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)'\n  },\n  searchInput: {\n    fontSize: theme.typography.fontSize\n  },\n  block: {\n    display: 'block'\n  },\n  addUser: {\n    marginRight: theme.spacing(1)\n  },\n  contentWrapper: {\n    margin: '40px 16px'\n  },\n  Card: {\n    height: 250,\n    width: 250,\n    margin: '20px 0px'\n  }\n}));\n\nconst Content = () => {\n  const classes = useStyles();\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        pageidx = _useState2[0],\n        setPageidx = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        orders = _useState4[0],\n        setOrder = _useState4[1];\n\n  let temporder = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  const arrmake = () => {\n    for (let i = 1; i < orders.length / 8; i++) {\n      temporder.push(0, 0, 0, 0, 0, 0, 0, 0);\n    }\n\n    for (let j = 0; j < orders.length; j++) {\n      temporder[j] = orders[j];\n    }\n  };\n\n  arrmake(); // 데이터 전부를 받아 전부 card로 만듬\n\n  const orderCard = temporder.map((order, idx) => {\n    if (order === 0) {\n      return React.createElement(Card, {\n        className: classes.Card,\n        variant: \"outlined\",\n        display: \"inline\",\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(Card, {\n        className: classes.Card,\n        variant: \"outlined\",\n        display: \"inline\",\n        key: idx,\n        onClick: () => {\n          console.log(\"aa\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.numbering,\n        color: \"textSecondary\",\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, order.orderNum), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, order.itemList.menu), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, order.itemList.ea)));\n    }\n  }); // orderCard 중 8개를 받아 하나의 페이지에 출력할 데이터만 뽑음\n\n  const orderList = idx => {\n    return React.createElement(React.Fragment, null, React.createElement(Grid, {\n      container: true,\n      justify: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, orderCard.slice((idx - 1) * 8 + 0, (idx - 1) * 8 + 4)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      justify: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, orderCard.slice((idx - 1) * 8 + 4, (idx - 1) * 8 + 8)));\n  };\n\n  const testinput = () => {\n    const or = {\n      orderNum: 114,\n      itemList: {\n        menu: \"감자튀김\",\n        ea: 5\n      }\n    };\n    setOrder(orders.concat(or));\n  };\n\n  const pageClick = isForward => {\n    if (isForward) {\n      if (pageidx + 1 < parseInt(orderCard.length / 8)) {\n        setPageidx(pageidx + 1);\n      } else {\n        setPageidx(0);\n      }\n    } else {\n      if (pageidx - 1 >= 0) {\n        setPageidx(pageidx - 1);\n      } else {\n        setPageidx(parseInt(orderCard.length / 8) - 1);\n      }\n    }\n  };\n\n  return React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    onClick: () => {\n      pageClick(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(ArrowBackIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))), React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, orderList(pageidx + 1)), React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    onClick: () => {\n      pageClick(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(ArrowForwardIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    onClick: () => {\n      testinput();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \" \\uB370\\uC774\\uD130 \\uC0BD\\uC785\"), React.createElement(Pagination, {\n    limit: 1,\n    offset: pageidx,\n    total: orderCard.length / 8,\n    onClick: (e, offset) => setPageidx(offset),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })));\n};\n\nexport default Content;","map":{"version":3,"sources":["C:/project1/s02p13c103/web/src/components/Template/Content.js"],"names":["React","useState","PropTypes","Typography","Paper","Grid","CardContent","Card","makeStyles","Button","ArrowBackIcon","ArrowForwardIcon","Pagination","useStyles","theme","paper","maxWidth","margin","overflow","searchBar","borderBottom","searchInput","fontSize","typography","block","display","addUser","marginRight","spacing","contentWrapper","height","width","Content","classes","pageidx","setPageidx","orders","setOrder","temporder","arrmake","i","length","push","j","orderCard","map","order","idx","console","log","numbering","orderNum","itemList","menu","ea","orderList","slice","testinput","or","concat","pageClick","isForward","parseInt","e","offset"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Card from '@material-ui/core/Card';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport Pagination from \"material-ui-flat-pagination\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    maxWidth: 1800,\r\n    margin: 'auto',\r\n    overflow: 'hidden',\r\n  },\r\n  searchBar: {\r\n    borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\r\n  },\r\n  searchInput: {\r\n    fontSize: theme.typography.fontSize,\r\n  },\r\n  block: {\r\n    display: 'block',\r\n  },\r\n  addUser: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  contentWrapper: {\r\n    margin: '40px 16px',\r\n  },\r\n  Card: {\r\n    height: 250,\r\n    width: 250,\r\n    margin: '20px 0px'\r\n  },\r\n}))\r\n\r\nconst Content = () => {\r\n  const classes = useStyles();\r\n  const [pageidx, setPageidx] = useState(0)\r\n  const [orders, setOrder] = useState([])\r\n\r\n  let temporder = [0, 0, 0, 0, 0, 0, 0, 0]\r\n  const arrmake = () => {\r\n    for (let i = 1; i < orders.length / 8; i++) {\r\n      temporder.push(0, 0, 0, 0, 0, 0, 0, 0)\r\n    }\r\n    for (let j = 0; j < orders.length; j++) {\r\n      temporder[j] = orders[j]\r\n    }\r\n  }\r\n  arrmake()\r\n\r\n  // 데이터 전부를 받아 전부 card로 만듬\r\n  const orderCard = temporder.map((order, idx) => {\r\n    if (order === 0) {\r\n      return (\r\n        <Card className={classes.Card} variant=\"outlined\" display=\"inline\" key={idx} />\r\n\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <Card className={classes.Card} variant=\"outlined\" display=\"inline\" key={idx} onClick={() => { console.log(\"aa\") }}>\r\n          <CardContent>\r\n            <Typography className={classes.numbering} color=\"textSecondary\" align=\"center\">\r\n              {order.orderNum}\r\n            </Typography>\r\n            <h3>{order.itemList.menu}</h3>\r\n            <h4>{order.itemList.ea}</h4>\r\n          </CardContent>\r\n        </Card>\r\n      )\r\n    }\r\n  })\r\n  // orderCard 중 8개를 받아 하나의 페이지에 출력할 데이터만 뽑음\r\n  const orderList = (idx) => {\r\n    return (\r\n      <>\r\n        <Grid container justify=\"space-between\">\r\n          {orderCard.slice((idx - 1) * 8 + 0, (idx - 1) * 8 + 4)}\r\n        </Grid>\r\n        <br />\r\n        <Grid container justify=\"space-between\">\r\n          {orderCard.slice((idx - 1) * 8 + 4, (idx - 1) * 8 + 8)}\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const testinput = () => {\r\n    const or = {\r\n      orderNum: 114,\r\n      itemList: {\r\n        menu: \"감자튀김\",\r\n        ea: 5\r\n      }\r\n    }\r\n    setOrder(orders.concat(or))\r\n  }\r\n\r\n  const pageClick = (isForward) => {\r\n    if (isForward) {\r\n      if (pageidx + 1 < parseInt(orderCard.length / 8)) {\r\n        setPageidx(pageidx + 1)\r\n      } else {\r\n        setPageidx(0)\r\n      }\r\n    } else {\r\n      if (pageidx - 1 >= 0) {\r\n        setPageidx(pageidx - 1)\r\n      } else {\r\n        setPageidx(parseInt(orderCard.length / 8) - 1)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <Grid container>\r\n        <Grid item xs={1} container justify=\"center\" alignItems=\"center\">\r\n          <Button variant=\"contained\" onClick={() => { pageClick(false) }}><ArrowBackIcon /></Button>\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          {orderList(pageidx + 1)}\r\n        </Grid>\r\n        <Grid item xs={1} container justify=\"center\" alignItems=\"center\">\r\n          <Button variant=\"contained\" onClick={() => { pageClick(true) }}><ArrowForwardIcon /></Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"center\">\r\n        <Button variant=\"contained\" onClick={() => { testinput() }}> 데이터 삽입</Button>\r\n        <Pagination\r\n          limit={1}\r\n          offset={pageidx}\r\n          total={orderCard.length / 8}\r\n          onClick={(e, offset) => setPageidx(offset)}\r\n        />\r\n      </Grid>\r\n    </Paper >\r\n  );\r\n}\r\n\r\n\r\nexport default Content"]},"metadata":{},"sourceType":"module"}